0x0002:  print 'Welcome to the Synacor Challenge!\nPlease record your progress by putting codes like\nthis one into the challenge website: SUNDliAWLxPA\n\nExecuting self-test...\n\n'
0x0140:  jmp 0x015b
0x0142:  print 'jmp fails\n'
0x0156:  halt
0x0160:  jmp 0x0166
0x0162:  jmp 0x0170
0x0164:  jmp 0x018d
0x0166:  jmp 0x01e4
0x0168:  jmp 0x01a8
0x016a:  jmp 0x01c5
0x0170:  print 'jmp lands -2\n'
0x018a:  halt
0x018d:  print 'jmp lands -1\n'
0x01a7:  halt
0x01aa:  print 'jmp lands +1\n'
0x01c4:  halt
0x01c9:  print 'jmp lands +2\n'
0x01e3:  halt
0x01e4:  if (0x0 != 0) jmp 0x0432
0x01e7:  if (0x1 == 0) jmp 0x0432
0x01ea:  if (0x1 != 0) jmp 0x01ef
0x01ed:  jmp 0x0432
0x01ef:  if (0x0 == 0) jmp 0x01f4
0x01f2:  jmp 0x0432
0x01f4:  if (A != 0) jmp 0x0445
0x01f7:  if (B != 0) jmp 0x0445
0x01fa:  if (C != 0) jmp 0x0445
0x01fd:  if (D != 0) jmp 0x0445
0x0200:  if (E != 0) jmp 0x0445
0x0203:  if (F != 0) jmp 0x0445
0x0206:  if (G != 0) jmp 0x0445
0x0209:  if (H != 0) jmp 0x0445
0x020c:  A = 0x1
0x020f:  if (A == 0) jmp 0x045e
0x0212:  A = 0x0
0x0215:  if (A != 0) jmp 0x045e
0x0218:  A = 0x1 + 0x1
0x021c:  if (A != 0) jmp 0x0234
0x021f:  print 'no add op\n'
0x0233:  halt
0x0234:  B = (A == 0x2) ? 1 : 0
0x0238:  if (B != 0) jmp 0x024e
0x023b:  print 'no eq op\n'
0x024d:  halt
0x024e:  push A
0x0250:  push B
0x0252:  A = pop
0x0254:  B = pop
0x0256:  C = (B == 0x2) ? 1 : 0
0x025a:  if (C == 0) jmp 0x0486
0x025d:  C = (A == 0x1) ? 1 : 0
0x0261:  if (C == 0) jmp 0x0486
0x0264:  C = (B > A) ? 1 : 0
0x0268:  if (C == 0) jmp 0x0473
0x026b:  C = (A > B) ? 1 : 0
0x026f:  if (C != 0) jmp 0x0473
0x0272:  C = (0x2a > 0x2a) ? 1 : 0
0x0276:  if (C != 0) jmp 0x0473
0x0279:  A = 0x70f0 & 0x4caa
0x027d:  B = (A == 0x40a0) ? 1 : 0
0x0281:  if (B == 0) jmp 0x0499
0x0284:  B = 0x70f0 | 0x4caa
0x0288:  A = (B == 0x7cfa) ? 1 : 0
0x028c:  if (A != 0) jmp 0x02ac
0x028f:  print 'no bitwise or\n'
0x02ab:  halt
0x02ac:  A = ~0x0
0x02af:  B = (A == 0x7fff) ? 1 : 0
0x02b3:  if (B == 0) jmp 0x04b8
0x02b6:  A = ~0x5555
0x02b9:  B = (A == 0x2aaa) ? 1 : 0
0x02bd:  if (B == 0) jmp 0x04b8
0x02c0:  call 0x0505
0x02c2:  jmp 0x0509
0x02c4:  A = pop
0x02c6:  B = (A == 0x2c4) ? 1 : 0
0x02ca:  if (B != 0) jmp 0x0509
0x02cd:  B = (A == 0x2c2) ? 1 : 0
0x02d1:  if (B == 0) jmp 0x0509
0x02d4:  A = 0x507
0x02d7:  call A
0x02d9:  jmp 0x0509
0x02db:  A = pop
0x02dd:  B = (A == 0x2db) ? 1 : 0
0x02e1:  if (B != 0) jmp 0x0509
0x02e4:  B = (A == 0x2d9) ? 1 : 0
0x02e8:  if (B == 0) jmp 0x0509
0x02eb:  A = 0x7fff + 0x7fff
0x02ef:  B = (A == 0x7ffe) ? 1 : 0
0x02f3:  if (B == 0) jmp 0x0520
0x02f6:  B = (0x7ffe == A) ? 1 : 0
0x02fa:  if (B == 0) jmp 0x0520
0x02fd:  A = 0x4000 + 0x4000
0x0301:  if (A != 0) jmp 0x0520
0x0304:  A = 0x4000 + 0x4000
0x0308:  if (A != 0) jmp 0x0520
0x030b:  A = 0x6 * 0x9
0x030f:  B = (A == 0x2a) ? 1 : 0
0x0313:  if (B != 0) jmp 0x0565
0x0316:  B = (A == 0x36) ? 1 : 0
0x031a:  if (B == 0) jmp 0x0586
0x031d:  A = 0x3039 * 0x7d7b
0x0321:  B = (A == 0x63) ? 1 : 0
0x0325:  if (B == 0) jmp 0x0520
0x0328:  A = 0x6 % 0x3
0x032c:  B = (A == 0x0) ? 1 : 0
0x0330:  if (B == 0) jmp 0x059d
0x0333:  A = 0x46 % 0x6
0x0337:  B = (A == 0x4) ? 1 : 0
0x033b:  if (B == 0) jmp 0x059d
0x033e:  A = 0x7ffe * 0xf
0x0342:  B = (A == 0x7fe2) ? 1 : 0
0x0346:  if (B == 0) jmp 0x0520
0x0349:  jmp 0x034d

         0x30 0x75 0x10 0x27

0x034d:  A = [ 0x034b ]
0x0350:  B = (A == 0x4e20) ? 1 : 0
0x0354:  if (B == 0) jmp 0x04d7
0x0357:  C = 0x34b + 0x1
0x035b:  A = [ C ]
0x035e:  B = (A == 0x2710) ? 1 : 0
0x0362:  if (B == 0) jmp 0x04d7
0x0365:  A = 0x34b
0x0368:  [ A ] = 0x7530
0x036b:  C = [ A ]
0x036e:  B = (C == 0x7530) ? 1 : 0
0x0372:  if (B == 0) jmp 0x04ee
0x0375:  call 0x06bb
0x0377:  A = [ 0x17b4 ]
0x037a:  B = (A == 0xb) ? 1 : 0
0x037e:  if (B == 0) jmp 0x04d7
0x0381:  C = 0x17b4 + 0x1
0x0385:  A = [ C ]
0x0388:  B = (A == 0x74) ? 1 : 0
0x038c:  if (B == 0) jmp 0x04d7
0x038f:  [ C ] = 0x54
0x0392:  A = [ C ]
0x0395:  B = (A == 0x74) ? 1 : 0
0x0399:  if (B != 0) jmp 0x04ee
0x039c:  B = (A == 0x54) ? 1 : 0
0x03a0:  if (B == 0) jmp 0x04ee
0x03a3:  [ 0x03a9 ] = 0x15
0x03a6:  [ 0x03aa ] = 0x7
0x03aa:  if (0x13 != 0) jmp 0x03d2
0x03ad:  print 'wmem opwrite fail\n'
0x03d1:  halt

0x03d2:  B = 0xa + 0x17c0
0x03d6:  B = B + 0x1
0x03da:  C = [ 0x17e4 ]
0x03dd:  C = C + 0x17e4
0x03e1:  A = 0x17e4
0x03e4:  A = A + 0x1
0x03e8:  D = (A > C) ? 1 : 0
0x03ec:  if (D != 0) jmp 0x03ff
0x03ef:  E = [ A ]
0x03f2:  [ B ] = E
0x03f5:  A = A + 0x1
0x03f9:  B = B + 0x1
0x03fd:  jmp 0x03e8
0x03ff:  A = [ 0x17c0 ]
0x0402:  B = [ 0x17d3 ]
0x0405:  A = A + B
0x0409:  A = A + 0x1
0x040d:  [ 0x17c0 ] = A
0x0410:  [ 0x17d3 ] = 0x2c
0x0413:  A = 0x17c0
0x0416:  call 0x05ee
0x0418:  push A
0x041a:  push B
0x041c:  push C
0x041e:  A = 0x68e3
0x0421:  B = 0x5fb
0x0424:  C = 0x176d + 0x977
0x0428:  call 0x05b2
0x042a:  C = pop
0x042c:  B = pop
0x042e:  A = pop
0x0430:  jmp 0x0aae

0x0432:  print 'no jt/jf\n'
0x0444:  halt
0x0445:  print 'nonzero reg\n'
0x045d:  halt
0x045e:  print 'no set op\n'
0x0472:  halt
0x0473:  print 'no gt op\n'
0x0485:  halt
0x0486:  print 'no stack\n'
0x0498:  halt
0x0499:  print 'no bitwise and\n'
0x04b7:  halt
0x04b8:  print 'no bitwise not\n'
0x04d6:  halt
0x04d7:  print 'no rmem op\n'
0x04ed:  halt
0x04ee:  print 'no wmem op\n'
0x0504:  halt
0x0505:  jmp 0x02c4
0x0507:  jmp 0x02db
0x0509:  print 'no call op\n'
0x051f:  halt
0x0520:  print 'no modulo math during add or mult\n'
0x0564:  halt
0x0565:  print 'not hitchhiking\n'
0x0585:  halt
0x0586:  print 'no mult op\n'
0x059c:  halt
0x059d:  print 'no mod op\n'
0x05b1:  halt

0x05b2:  push A
0x05b4:  push D
0x05b6:  push E
0x05b8:  push F
0x05ba:  push G
0x05bc:  G = A
0x05bf:  F = B
0x05c2:  E = [ A ]
0x05c5:  B = 0x0
0x05c8:  D = 0x1 + B
0x05cc:  A = (D > E) ? 1 : 0
0x05d0:  if (A != 0) jmp 0x05e3
0x05d3:  D = D + G
0x05d7:  A = [ D ]
0x05da:  call F
0x05dc:  B = B + 0x1
0x05e0:  if (B != 0) jmp 0x05c8
0x05e3:  G = pop
0x05e5:  F = pop
0x05e7:  E = pop
0x05e9:  D = pop
0x05eb:  A = pop
0x05ed:  return

0x05ee:  push B
0x05f0:  B = 0x5f8
0x05f3:  call 0x05b2
0x05f5:  B = pop
0x05f7:  return

0x05f8:  print A
0x05fa:  return

0x05fb:  push B
0x05fd:  B = C
0x0600:  call 0x084d
0x0602:  print A
0x0604:  B = pop
0x0606:  return

0x0607:  push B
0x0609:  push D
0x060b:  D = [ A ]
0x060e:  if (D == 0) jmp 0x061b
0x0611:  call 0x05b2
0x0613:  if (B != 0) jmp 0x061b
0x0616:  A = C
0x0619:  jmp 0x061e
0x061b:  A = 0x7fff
0x061e:  D = pop
0x0620:  B = pop
0x0622:  return

0x0623:  push B
0x0625:  push C
0x0627:  C = B
0x062a:  B = 0x645
0x062d:  call 0x0607
0x062f:  C = pop
0x0631:  B = pop
0x0633:  return

0x0634:  push B
0x0636:  push C
0x0638:  C = B
0x063b:  B = 0x670
0x063e:  call 0x0607
0x0640:  C = pop
0x0642:  B = pop
0x0644:  return

0x0645:  A = (A == C) ? 1 : 0
0x0649:  if (A == 0) jmp 0x0652
0x064c:  C = B
0x064f:  B = 0x7fff
0x0652:  return

0x0653:  push D
0x0655:  D = C + 0x1
0x0659:  D = D + B
0x065d:  D = [ D ]
0x0660:  D = (A == D) ? 1 : 0
0x0664:  if (D != 0) jmp 0x066d
0x0667:  C = B
0x066a:  B = 0x7fff
0x066d:  D = pop
0x066f:  return

0x0670:  push B
0x0672:  B = C
0x0675:  call 0x0683
0x0677:  B = pop
0x0679:  if (A == 0) jmp 0x0682
0x067c:  C = B
0x067f:  B = 0x7fff
0x0682:  return

0x0683:  push B
0x0685:  push C
0x0687:  push D
0x0689:  push E
0x068b:  D = [ A ]
0x068e:  E = [ B ]
0x0691:  C = (D == E) ? 1 : 0
0x0695:  if (C == 0) jmp 0x06af
0x0698:  C = D | E
0x069c:  if (C == 0) jmp 0x06aa
0x069f:  C = B
0x06a2:  B = 0x653
0x06a5:  call 0x05b2
0x06a7:  if (B == 0) jmp 0x06af
0x06aa:  A = 0x1
0x06ad:  jmp 0x06b2
0x06af:  A = 0x0
0x06b2:  E = pop
0x06b4:  D = pop
0x06b6:  C = pop
0x06b8:  B = pop
0x06ba:  return

0x06bb:  push A
0x06bd:  push B
0x06bf:  B = 0x17b4
0x06c2:  A = [ B ]
0x06c5:  push B
0x06c7:  B = B * B
0x06cb:  call 0x084d
0x06cd:  B = 0x4154
0x06d0:  call 0x084d
0x06d2:  B = pop
0x06d4:  [ B ] = A
0x06d7:  B = B + 0x1
0x06db:  A = (0x7562 == B) ? 1 : 0
0x06df:  if (A == 0) jmp 0x06c2
0x06e2:  B = pop
0x06e4:  A = pop
0x06e6:  return

// Read Input

0x06e7:  push A
0x06e9:  push C
0x06eb:  push D
0x06ed:  push E
0x06ef:  push F
0x06f1:  C = B + A
0x06f5:  A = B
0x06f8:  F = 0x0
0x06fb:  A = A + 0x1
0x06ff:  D = (A > C) ? 1 : 0
0x0703:  if (D != 0) jmp 0x0718
0x0706:  E = read
0x0708:  D = (E == 0xa) ? 1 : 0
0x070c:  if (D != 0) jmp 0x0718
0x070f:  [ A ] = E
0x0712:  F = F + 0x1
0x0716:  jmp 0x06fb
0x0718:  [ B ] = F
0x071b:  D = (E == 0xa) ? 1 : 0
0x071f:  if (D != 0) jmp 0x0726
0x0722:  E = read
0x0724:  jmp 0x071b
0x0726:  F = pop
0x0728:  E = pop
0x072a:  D = pop
0x072c:  C = pop
0x072e:  A = pop
0x0730:  return

0x0731:  push D
0x0733:  push E
0x0735:  push F
0x0737:  push G
0x0739:  G = 0x1
0x073c:  E = D + G
0x0740:  E = [ E ]
0x0743:  F = 0x17ed + G
0x0747:  [ F ] = E
0x074a:  G = G + 0x1
0x074e:  F = [ 0x17ed ]
0x0751:  E = (G > F) ? 1 : 0
0x0755:  if (E == 0) jmp 0x073c
0x0758:  D = 0x0
0x075b:  E = 0x0
0x075e:  F = [ 0x17ed ]
0x0761:  F = E % F
0x0765:  F = F + 0x17ed
0x0769:  F = F + 0x1
0x076d:  G = [ F ]
0x0770:  G = G * 0x1481
0x0774:  G = G + 0x3039
0x0778:  [ F ] = G
0x077b:  push A
0x077d:  push B
0x077f:  B = G
0x0782:  call 0x084d
0x0784:  G = A
0x0787:  B = pop
0x0789:  A = pop
0x078b:  F = [ B ]
0x078e:  G = G % F
0x0792:  G = G + 0x1
0x0796:  F = (G > C) ? 1 : 0
0x079a:  if (F != 0) jmp 0x07a0
0x079d:  D = 0x1
0x07a0:  G = G + B
0x07a4:  G = [ G ]
0x07a7:  E = E + 0x1
0x07ab:  F = E + 0x17f1
0x07af:  [ F ] = G
0x07b2:  F = [ 0x17f1 ]
0x07b5:  F = (E == F) ? 1 : 0
0x07b9:  if (F == 0) jmp 0x075e
0x07bc:  if (D == 0) jmp 0x0758
0x07bf:  push A
0x07c1:  A = 0x17f1
0x07c4:  call 0x05ee
0x07c6:  A = pop
0x07c8:  G = pop
0x07ca:  F = pop
0x07cc:  E = pop
0x07ce:  D = pop
0x07d0:  return

0x07d1:  push A
0x07d3:  push B
0x07d5:  push C
0x07d7:  push D
0x07d9:  push E
0x07db:  push F
0x07dd:  C = 0x1
0x07e0:  F = 0x0
0x07e3:  if (A == 0) jmp 0x082c
0x07e6:  E = (C == 0x2710) ? 1 : 0
0x07ea:  D = A
0x07ed:  if (E != 0) jmp 0x07f8
0x07f0:  B = C * 0xa
0x07f4:  D = A % B
0x07f8:  E = 0x0
0x07fb:  C = C * 0x7fff
0x07ff:  if (D == 0) jmp 0x080c
0x0802:  E = E + 0x1
0x0806:  D = D + C
0x080a:  jmp 0x07ff
0x080c:  C = C * 0x7fff
0x0810:  D = E * C
0x0814:  D = D * 0x7fff
0x0818:  A = A + D
0x081c:  E = E + 0x30
0x0820:  C = C * 0xa
0x0824:  F = F + 0x1
0x0828:  push E
0x082a:  jmp 0x07e3
0x082c:  if (F != 0) jmp 0x0833
0x082f:  print '0'
0x0831:  jmp 0x0840
0x0833:  if (F == 0) jmp 0x0840
0x0836:  A = pop
0x0838:  print A
0x083a:  F = F + 0x7fff
0x083e:  jmp 0x0833
0x0840:  F = pop
0x0842:  E = pop
0x0844:  D = pop
0x0846:  C = pop
0x0848:  B = pop
0x084a:  A = pop
0x084c:  return

0x084d:  push B
0x084f:  push C
0x0851:  C = A & B
0x0855:  C = ~C
0x0858:  A = A | B
0x085c:  A = A & C
0x0860:  C = pop
0x0862:  B = pop
0x0864:  return

0x0865:  A = A + B
0x0869:  B = (B > A) ? 1 : 0
0x086d:  return

0x086e:  push C
0x0870:  C = (B > A) ? 1 : 0
0x0874:  B = B * 0x7fff
0x0878:  A = A + B
0x087c:  B = C
0x087f:  C = pop
0x0881:  return

0x0882:  if (A == 0) jmp 0x08c1
0x0885:  if (B == 0) jmp 0x08c1
0x0888:  push C
0x088a:  push D
0x088c:  C = (B > A) ? 1 : 0
0x0890:  if (C != 0) jmp 0x089c
0x0893:  C = A
0x0896:  A = B
0x0899:  B = C
0x089c:  C = A
0x089f:  A = 0x0
0x08a2:  A = A + B
0x08a6:  D = (B > A) ? 1 : 0
0x08aa:  if (D != 0) jmp 0x08b9
0x08ad:  C = C + 0x7fff
0x08b1:  if (C != 0) jmp 0x08a2
0x08b4:  B = 0x0
0x08b7:  jmp 0x08bc
0x08b9:  B = 0x1
0x08bc:  D = pop
0x08be:  C = pop
0x08c0:  return
0x08c1:  A = 0x0
0x08c4:  B = 0x0
0x08c7:  return

0x08c8:  push B
0x08ca:  push C
0x08cc:  if (B == 0) jmp 0x08e4
0x08cf:  B = B + 0x7fff
0x08d3:  C = A & 0x4000
0x08d7:  A = A * 0x2
0x08db:  if (C == 0) jmp 0x08cc
0x08de:  A = A | 0x1
0x08e2:  jmp 0x08cc
0x08e4:  C = pop
0x08e6:  B = pop
0x08e8:  return

0x08e9:  push B
0x08eb:  B = (A > 0xe) ? 1 : 0
0x08ef:  if (B != 0) jmp 0x0905
0x08f2:  B = A
0x08f5:  A = 0x1
0x08f8:  if (B == 0) jmp 0x0908
0x08fb:  B = B + 0x7fff
0x08ff:  A = A * 0x2
0x0903:  jmp 0x08f8
0x0905:  A = 0x7fff
0x0908:  B = pop
0x090a:  return

0x090b:  jmp 0x0aae

FE 17 08 18 14 69 17 69 00 00 CE 18 D8 18 1A 69 1C 69 00 00 29 19 33 19 1E 69 21 69 00 00 C5 19 CF 19 24 69 27 69 00 
00 37 1A 41 1A 2A 69 2D 69 00 00 0A 1B 16 1B 30 69 33 69 00 00 9E 1B B7 1B 36 69 38 69 00 00 66 1C 72 1C 3A 69 3D 69 
00 00 4E 1D 5A 1D 40 69 42 69 00 00 C0 1D CC 1D 44 69 47 69 00 00 77 1E 7F 1E 4A 69 4E 69 00 00 47 1F 52 69 55 69 58 
69 00 00 E3 1F F3 1F 5B 69 61 69 9E 0E 8C 20 9C 20 67 69 6B 69 A2 0E E5 20 F5 20 6F 69 73 69 AC 0E 3E 21 4E 21 77 69 
7C 69 B6 0E E1 21 F1 21 81 69 85 69 C0 0E 3A 22 4A 22 89 69 8E 69 CA 0E E4 22 F4 22 93 69 97 69 D4 0E 3D 23 4D 23 9B 
69 9D 69 DE 0E 8A 23 9A 23 9F 69 A1 69 00 00 D7 23 E7 23 A3 69 A6 69 48 0E 2B 24 38 24 A9 69 AC 69 48 0E B5 24 C2 24 
AF 69 B2 69 48 0E EF 24 FC 24 B5 69 B8 69 48 0E 29 25 36 25 BB 69 BE 69 48 0E A5 25 AB 25 C1 69 C4 69 00 00 AF 26 B5 
26 C7 69 CA 69 00 00 77 27 7D 27 CD 69 D2 69 00 00 00 00 B9 28 BF 28 E3 69 E5 69 35 0F 6D 29 73 29 E7 69 EA 69 00 00 
08 2A 0E 2A ED 69 EF 69 00 00 8C 2A 92 2A F1 69 F4 69 00 00 4E 2B 54 2B F7 69 F9 69 00 00 03 2C 18 2C FB 69 FD 69 00 
00 20 2D 35 2D FF 69 01 6A 00 00 CE 2D D4 2D 03 6A 07 6A 00 00 8F 2E 95 2E 0B 6A 0E 6A 00 00 A7 2F AD 2F 11 6A 14 6A 
00 00 AB 30 BB 30 17 6A 1B 6A 00 00 93 31 A3 31 1F 6A 23 6A 00 00 2F 32 3F 32 27 6A 2A 6A 00 00 32 33 42 33 2D 6A 30 
6A 00 00 6C 34 7C 34 33 6A 36 6A 00 00 7E 35 8C 35 39 6A 3C 6A 00 00 75 36 83 36 3F 6A 42 6A 00 00 0A 37 18 37 45 6A 
49 6A 00 00 6C 38 81 38 4D 6A 4F 6A 00 00 2A 39 38 39 51 6A 54 6A 03 12 AD 39 B8 39 57 6A 5A 6A 76 0F 44 3A 4F 3A 5D 
6A 61 6A 87 0F E2 3A ED 3A 65 6A 69 6A 98 0F 7E 3B 89 3B 6D 6A 71 6A A9 0F 91 3C 9C 3C 75 6A 79 6A BC 0F 30 3D 3B 3D 
7D 6A 82 6A CD 0F D2 3D DD 3D 87 6A 8C 6A DE 0F 77 3E 82 3E 91 6A 95 6A EF 0F 14 3F 1F 3F 99 6A 9D 6A 00 10 B1 3F BC 
3F A1 6A A6 6A 11 10 55 40 60 40 AB 6A B0 6A 22 10 F7 40 02 41 B5 6A B9 6A 33 10 97 41 A9 41 BD 6A C1 6A 44 10 4B 42 
56 42 C5 6A C9 6A 47 10 E7 42 F2 42 CD 6A D1 6A 58 10 85 43 90 43 D5 6A D8 6A 69 10 1C 44 22 44 DB 6A DD 6A 52 12 FD 
44 1D 45 DF 6A E2 6A 00 00 8E 45 AE 45 E5 6A E8 6A 00 00 1D 46 2F 46 EB 6A EF 6A 00 00 87 46 8D 46 F3 6A F4 6A 75 0E 
8E 46 95 46 00 00 70 12 1E 47 2C 47 00 00 00 00 A8 47 B0 47 FF 7F 15 13 24 48 30 48 FF 7F 43 13 88 48 8C 48 71 09 BF 
12 BA 48 C3 48 94 09 F0 14 03 49 11 49 A9 09 01 15 51 49 5C 49 B3 09 12 15 A4 49 B1 49 A4 09 23 15 09 4A 13 4A AE 09 
34 15 55 4A 60 4A 9F 09 45 15 A9 4A B7 4A B8 09 00 00 F8 4A FC 4A 3F 0A 00 00 3A 4B 41 4B 53 0A 59 16 B8 4B C5 4B B8 
09 00 00 4D 56 55 56 F9 09 00 00 49 09 49 09

0x0aae:  push A
0x0ab0:  push B
0x0ab2:  push C
0x0ab4:  push D
0x0ab6:  B = [ 0x0aac ]
0x0ab9:  A = [ 0x0aad ]
0x0abc:  A = (A == B) ? 1 : 0
0x0ac0:  if (A != 0) jmp 0x0ad2
0x0ac3:  A = [ 0x0aac ]
0x0ac6:  A = A + 0x4
0x0aca:  A = [ A ]
0x0acd:  if (A == 0) jmp 0x0ad2
0x0ad0:  call A
0x0ad2:  B = [ 0x0aac ]
0x0ad5:  A = [ 0x0aad ]
0x0ad8:  A = (A == B) ? 1 : 0
0x0adc:  if (A != 0) jmp 0x0ae7
0x0adf:  A = 0x6576
0x0ae2:  [ A ] = 0x0
0x0ae5:  call 0x0b94
0x0ae7:  [ 0x0aad ] = B
0x0aea:  push A
0x0aec:  push B
0x0aee:  push C
0x0af0:  A = 0x6b16
0x0af3:  B = 0x5fb
0x0af6:  C = 0x23c + 0x3b3
0x0afa:  call 0x05b2
0x0afc:  C = pop
0x0afe:  B = pop
0x0b00:  A = pop
0x0b02:  A = 0x20
0x0b05:  B = 0x6576
0x0b08:  call 0x06e7
0x0b0a:  print '\n\n'
0x0b0e:  A = 0x6576
0x0b11:  B = 0x20
0x0b14:  call 0x0623
0x0b16:  B = (A == 0x7fff) ? 1 : 0
0x0b1a:  if (B == 0) jmp 0x0b20
0x0b1d:  A = [ 0x6576 ]
0x0b20:  C = A
0x0b23:  B = [ 0x6576 ]
0x0b26:  push B
0x0b28:  [ 0x6576 ] = C
0x0b2b:  A = 0x6b06
0x0b2e:  B = 0x6576
0x0b31:  call 0x0634
0x0b33:  B = pop
0x0b35:  [ 0x6576 ] = B
0x0b38:  B = (A == 0x7fff) ? 1 : 0
0x0b3c:  if (B == 0) jmp 0x0b45
0x0b3f:  A = 0x0
0x0b42:  C = 0x0
0x0b45:  B = 0x6b0e + 0x1
0x0b49:  B = B + A
0x0b4d:  B = [ B ]
0x0b50:  D = [ 0x6576 ]
0x0b53:  D = (D == C) ? 1 : 0
0x0b57:  if (D != 0) jmp 0x0b80
0x0b5a:  A = C * 0x7fff
0x0b5e:  D = [ 0x6576 ]
0x0b61:  D = A + D
0x0b65:  if (C == 0) jmp 0x0b6c
0x0b68:  D = D + 0x7fff
0x0b6c:  D = D % 0x20
0x0b70:  A = 0x6576 + C
0x0b74:  if (C == 0) jmp 0x0b7b
0x0b77:  A = A + 0x1
0x0b7b:  [ A ] = D
0x0b7e:  jmp 0x0b86
0x0b80:  A = 0x6576
0x0b83:  [ A ] = 0x0
0x0b86:  call B
0x0b88:  if (B != 0) jmp 0x0ab6
0x0b8b:  D = pop
0x0b8d:  C = pop
0x0b8f:  B = pop
0x0b91:  A = pop
0x0b93:  return

0x0b94:  push A
0x0b96:  push B
0x0b98:  push C
0x0b9a:  B = [ A ]
0x0b9d:  if (B == 0) jmp 0x0bd8
0x0ba0:  call 0x1721
0x0ba2:  if (A == 0) jmp 0x0bbe
0x0ba5:  push A
0x0ba7:  call 0x1766
0x0ba9:  B = A
0x0bac:  A = pop
0x0bae:  if (B == 0) jmp 0x0bbe
0x0bb1:  B = A + 0x1
0x0bb5:  A = [ B ]
0x0bb8:  call 0x05ee
0x0bba:  print '\n'
0x0bbc:  jmp 0x0ca6
0x0bbe:  push A
0x0bc0:  push B
0x0bc2:  push C
0x0bc4:  A = 0x6b28
0x0bc7:  B = 0x5fb
0x0bca:  C = 0x5722 + 0xe3f
0x0bce:  call 0x05b2
0x0bd0:  C = pop
0x0bd2:  B = pop
0x0bd4:  A = pop
0x0bd6:  jmp 0x0ca6
0x0bd8:  A = [ 0x0aac ]
0x0bdb:  push A
0x0bdd:  print '== '
0x0be3:  A = A + 0x0
0x0be7:  A = [ A ]
0x0bea:  call 0x05ee
0x0bec:  print ' ==\n'
0x0bf4:  A = pop
0x0bf6:  push A
0x0bf8:  A = A + 0x1
0x0bfc:  A = [ A ]
0x0bff:  B = [ A ]
0x0c02:  B = (B == 0x2) ? 1 : 0
0x0c06:  if (B == 0) jmp 0x0c20
0x0c09:  push A
0x0c0b:  A = 0xa78
0x0c0e:  call 0x1766
0x0c10:  B = A
0x0c13:  A = pop
0x0c15:  A = A + 0x1
0x0c19:  A = A + B
0x0c1d:  A = [ A ]
0x0c20:  call 0x05ee
0x0c22:  print '\n'
0x0c24:  A = pop
0x0c26:  push A
0x0c28:  call 0x16bf
0x0c2a:  if (A == 0) jmp 0x0c4a
0x0c2d:  push A
0x0c2f:  push B
0x0c31:  push C
0x0c33:  A = 0x6b3f
0x0c36:  B = 0x5fb
0x0c39:  C = 0x1c6 + 0xc20
0x0c3d:  call 0x05b2
0x0c3f:  C = pop
0x0c41:  B = pop
0x0c43:  A = pop
0x0c45:  C = [ 0x0aac ]
0x0c48:  call 0x16f4
0x0c4a:  A = pop
0x0c4c:  push A
0x0c4e:  A = A + 0x2
0x0c52:  A = [ A ]
0x0c55:  A = [ A ]
0x0c58:  C = (A == 0x1) ? 1 : 0
0x0c5c:  print '\nThere '
0x0c6a:  if (C != 0) jmp 0x0c75
0x0c6d:  print 'are'
0x0c73:  jmp 0x0c79
0x0c75:  print 'is '
0x0c7b:  call 0x07d1
0x0c7d:  print ' exit'
0x0c87:  C = (A == 0x1) ? 1 : 0
0x0c8b:  if (C != 0) jmp 0x0c90
0x0c8e:  print 's:\n'
0x0c94:  A = pop
0x0c96:  push A
0x0c98:  A = A + 0x2
0x0c9c:  A = [ A ]
0x0c9f:  B = 0x16b6
0x0ca2:  call 0x05b2
0x0ca4:  A = pop
0x0ca6:  C = pop
0x0ca8:  B = pop
0x0caa:  A = pop
0x0cac:  return

0x0cad:  push A
0x0caf:  push B
0x0cb1:  push C
0x0cb3:  B = A
0x0cb6:  A = [ 0x0aac ]
0x0cb9:  A = A + 0x2
0x0cbd:  A = [ A ]
0x0cc0:  call 0x0634
0x0cc2:  C = (A == 0x7fff) ? 1 : 0
0x0cc6:  if (C != 0) jmp 0x0ce6
0x0cc9:  C = [ 0x0aac ]
0x0ccc:  C = C + 0x3
0x0cd0:  C = [ C ]
0x0cd3:  C = C + 0x1
0x0cd7:  C = C + A
0x0cdb:  C = [ C ]
0x0cde:  [ 0x0aac ] = C
0x0ce1:  [ 0x0aad ] = 0x0
0x0ce4:  jmp 0x0cfe
0x0ce6:  push A
0x0ce8:  push B
0x0cea:  push C
0x0cec:  A = 0x6b5a
0x0cef:  B = 0x5fb
0x0cf2:  C = 0x13e7 + 0x1e00
0x0cf6:  call 0x05b2
0x0cf8:  C = pop
0x0cfa:  B = pop
0x0cfc:  A = pop
0x0cfe:  C = pop
0x0d00:  B = pop
0x0d02:  A = pop
0x0d04:  return

0x0d05:  push A
0x0d07:  push A
0x0d09:  push B
0x0d0b:  push C
0x0d0d:  A = 0x6b8c
0x0d10:  B = 0x5fb
0x0d13:  C = 0x3fab + 0x1cd
0x0d17:  call 0x05b2
0x0d19:  C = pop
0x0d1b:  B = pop
0x0d1d:  A = pop
0x0d1f:  A = pop
0x0d21:  return

0x0d22:  push A
0x0d24:  push C
0x0d26:  push A
0x0d28:  push B
0x0d2a:  push C
0x0d2c:  A = 0x6d85
0x0d2f:  B = 0x5fb
0x0d32:  C = 0x251b + 0x3c52
0x0d36:  call 0x05b2
0x0d38:  C = pop
0x0d3a:  B = pop
0x0d3c:  A = pop
0x0d3e:  C = 0x0
0x0d41:  call 0x16f4
0x0d43:  C = pop
0x0d45:  A = pop
0x0d47:  return

0x0d48:  push A
0x0d4a:  push B
0x0d4c:  push C
0x0d4e:  call 0x1721
0x0d50:  if (A == 0) jmp 0x0d81
0x0d53:  B = A + 0x2
0x0d57:  A = [ B ]
0x0d5a:  C = [ 0x0aac ]
0x0d5d:  C = (A == C) ? 1 : 0
0x0d61:  if (C == 0) jmp 0x0d81
0x0d64:  [ B ] = 0x0
0x0d67:  push A
0x0d69:  push B
0x0d6b:  push C
0x0d6d:  A = 0x6d96
0x0d70:  B = 0x5fb
0x0d73:  C = 0x3e9 + 0x311
0x0d77:  call 0x05b2
0x0d79:  C = pop
0x0d7b:  B = pop
0x0d7d:  A = pop
0x0d7f:  jmp 0x0d99
0x0d81:  push A
0x0d83:  push B
0x0d85:  push C
0x0d87:  A = 0x6d9e
0x0d8a:  B = 0x5fb
0x0d8d:  C = 0x61e9 + 0x1705
0x0d91:  call 0x05b2
0x0d93:  C = pop
0x0d95:  B = pop
0x0d97:  A = pop
0x0d99:  C = pop
0x0d9b:  B = pop
0x0d9d:  A = pop
0x0d9f:  return

0x0da0:  push A
0x0da2:  push B
0x0da4:  call 0x1721
0x0da6:  if (A == 0) jmp 0x0dd3
0x0da9:  B = A + 0x2
0x0dad:  A = [ B ]
0x0db0:  if (A != 0) jmp 0x0dd3
0x0db3:  A = [ 0x0aac ]
0x0db6:  [ B ] = A
0x0db9:  push A
0x0dbb:  push B
0x0dbd:  push C
0x0dbf:  A = 0x6dba
0x0dc2:  B = 0x5fb
0x0dc5:  C = 0x6108 + 0x760
0x0dc9:  call 0x05b2
0x0dcb:  C = pop
0x0dcd:  B = pop
0x0dcf:  A = pop
0x0dd1:  jmp 0x0deb
0x0dd3:  push A
0x0dd5:  push B
0x0dd7:  push C
0x0dd9:  A = 0x6dc4
0x0ddc:  B = 0x5fb
0x0ddf:  C = 0x5d37 + 0x236
0x0de3:  call 0x05b2
0x0de5:  C = pop
0x0de7:  B = pop
0x0de9:  A = pop
0x0deb:  B = pop
0x0ded:  A = pop
0x0def:  return

0x0df0:  push A
0x0df2:  push B
0x0df4:  call 0x1721
0x0df6:  if (A == 0) jmp 0x0e11
0x0df9:  B = A + 0x2
0x0dfd:  B = [ B ]
0x0e00:  if (B != 0) jmp 0x0e11
0x0e03:  B = A + 0x3
0x0e07:  B = [ B ]
0x0e0a:  if (B == 0) jmp 0x0e2b
0x0e0d:  call B
0x0e0f:  jmp 0x0e43
0x0e11:  push A
0x0e13:  push B
0x0e15:  push C
0x0e17:  A = 0x6de7
0x0e1a:  B = 0x5fb
0x0e1d:  C = 0x1c46 + 0x559e
0x0e21:  call 0x05b2
0x0e23:  C = pop
0x0e25:  B = pop
0x0e27:  A = pop
0x0e29:  jmp 0x0e43
0x0e2b:  push A
0x0e2d:  push B
0x0e2f:  push C
0x0e31:  A = 0x6e0a
0x0e34:  B = 0x5fb
0x0e37:  C = 0xe33 + 0x43ae
0x0e3b:  call 0x05b2
0x0e3d:  C = pop
0x0e3f:  B = pop
0x0e41:  A = pop
0x0e43:  B = pop
0x0e45:  A = pop
0x0e47:  return

0x0e48:  push A
0x0e4a:  push B
0x0e4c:  push C
0x0e4e:  A = 0xa78
0x0e51:  call 0x1766
0x0e53:  if (A != 0) jmp 0x0e6e
0x0e56:  A = 0xa74 + 0x2
0x0e5a:  [ A ] = 0x7fff
0x0e5d:  A = 0xa78 + 0x2
0x0e61:  [ A ] = 0x7fff
0x0e64:  A = 0xa70 + 0x2
0x0e68:  [ A ] = 0x7fff
0x0e6b:  [ 0x0aac ] = 0xa58
0x0e6e:  C = pop
0x0e70:  B = pop
0x0e72:  A = pop
0x0e74:  return

0x0e75:  push A
0x0e77:  push B
0x0e79:  push C
0x0e7b:  A = 0x6e2c
0x0e7e:  B = 0x5fb
0x0e81:  C = 0x2023 + 0x17d5
0x0e85:  call 0x05b2
0x0e87:  C = pop
0x0e89:  B = pop
0x0e8b:  A = pop
0x0e8d:  halt
0x0e8e:  halt
0x0e8f:  push B
0x0e91:  B = [ 0x0e8e ]
0x0e94:  B = B | A
0x0e98:  [ 0x0e8e ] = B
0x0e9b:  B = pop
0x0e9d:  return

0x0e9e:  [ 0x0e8e ] = 0x0
0x0ea1:  return

0x0ea2:  push A
0x0ea4:  A = 0x1
0x0ea7:  call 0x0e8f
0x0ea9:  A = pop
0x0eab:  return

0x0eac:  push A
0x0eae:  A = 0x2
0x0eb1:  call 0x0e8f
0x0eb3:  A = pop
0x0eb5:  return

0x0eb6:  push A
0x0eb8:  A = 0x4
0x0ebb:  call 0x0e8f
0x0ebd:  A = pop
0x0ebf:  return

0x0ec0:  push A
0x0ec2:  A = 0x8
0x0ec5:  call 0x0e8f
0x0ec7:  A = pop
0x0ec9:  return

0x0eca:  push A
0x0ecc:  A = 0x10
0x0ecf:  call 0x0e8f
0x0ed1:  A = pop
0x0ed3:  return

0x0ed4:  push A
0x0ed6:  A = 0x20
0x0ed9:  call 0x0e8f
0x0edb:  A = pop
0x0edd:  return

0x0ede:  push A
0x0ee0:  push B
0x0ee2:  push C
0x0ee4:  push D
0x0ee6:  A = 0x40
0x0ee9:  call 0x0e8f
0x0eeb:  push A
0x0eed:  push B
0x0eef:  push C
0x0ef1:  A = 0x6e4c
0x0ef4:  B = 0x5fb
0x0ef7:  C = 0x16f8 + 0xd7d
0x0efb:  call 0x05b2
0x0efd:  C = pop
0x0eff:  B = pop
0x0f01:  A = pop
0x0f03:  A = [ 0x0e8e ]
0x0f06:  B = 0x650a
0x0f09:  C = 0x7fff
0x0f0c:  D = 0x6e8b
0x0f0f:  call 0x0731
0x0f11:  push A
0x0f13:  push B
0x0f15:  push C
0x0f17:  A = 0x6e8f
0x0f1a:  B = 0x5fb
0x0f1d:  C = 0xc40 + 0x4fa3
0x0f21:  call 0x05b2
0x0f23:  C = pop
0x0f25:  B = pop
0x0f27:  A = pop
0x0f29:  [ 0x0aac ] = 0x971
0x0f2c:  D = pop
0x0f2e:  C = pop
0x0f30:  B = pop
0x0f32:  A = pop
0x0f34:  return

0x0f35:  push A
0x0f37:  push B
0x0f39:  A = [ 0x099e ]
0x0f3c:  B = [ 0x69dd ]
0x0f3f:  A = (A == B) ? 1 : 0
0x0f43:  if (A != 0) jmp 0x0f64
0x0f46:  push A
0x0f48:  push B
0x0f4a:  push C
0x0f4c:  A = 0x6ebb
0x0f4f:  B = 0x5fb
0x0f52:  C = 0x26de + 0x4b9c
0x0f56:  call 0x05b2
0x0f58:  C = pop
0x0f5a:  B = pop
0x0f5c:  A = pop
0x0f5e:  [ 0x0aac ] = 0x999
0x0f61:  [ 0x0aad ] = 0x999
0x0f64:  B = pop
0x0f66:  A = pop
0x0f68:  return

97 65 9D 65 A1 65 65 08 6E 08 82 08 00 00 16 00 00 00 00 00 00 00 00 00 00 00

0x0f76:  push A
0x0f78:  push B
0x0f7a:  A = 0x2
0x0f7d:  B = 0x0
0x0f80:  call 0x107a
0x0f82:  B = pop
0x0f84:  A = pop
0x0f86:  return

0x0f87:  push A
0x0f89:  push B
0x0f8b:  A = 0x8
0x0f8e:  B = 0x1
0x0f91:  call 0x10b7
0x0f93:  B = pop
0x0f95:  A = pop
0x0f97:  return

0x0f98:  push A
0x0f9a:  push B
0x0f9c:  A = 0x1
0x0f9f:  B = 0x2
0x0fa2:  call 0x107a
0x0fa4:  B = pop
0x0fa6:  A = pop
0x0fa8:  return

0x0fa9:  push A
0x0fab:  push B
0x0fad:  A = 0x1
0x0fb0:  B = 0x3
0x0fb3:  call 0x10b7
0x0fb5:  call 0x11b5
0x0fb7:  B = pop
0x0fb9:  A = pop
0x0fbb:  return

0x0fbc:  push A
0x0fbe:  push B
0x0fc0:  A = 0x4
0x0fc3:  B = 0x4
0x0fc6:  call 0x10b7
0x0fc8:  B = pop
0x0fca:  A = pop
0x0fcc:  return

0x0fcd:  push A
0x0fcf:  push B
0x0fd1:  A = 0x2
0x0fd4:  B = 0x5
0x0fd7:  call 0x107a
0x0fd9:  B = pop
0x0fdb:  A = pop
0x0fdd:  return

0x0fde:  push A
0x0fe0:  push B
0x0fe2:  A = 0xb
0x0fe5:  B = 0x6
0x0fe8:  call 0x10b7
0x0fea:  B = pop
0x0fec:  A = pop
0x0fee:  return

0x0fef:  push A
0x0ff1:  push B
0x0ff3:  A = 0x2
0x0ff6:  B = 0x7
0x0ff9:  call 0x107a
0x0ffb:  B = pop
0x0ffd:  A = pop
0x0fff:  return

0x1000:  push A
0x1002:  push B
0x1004:  A = 0x0
0x1007:  B = 0x8
0x100a:  call 0x107a
0x100c:  B = pop
0x100e:  A = pop
0x1010:  return

0x1011:  push A
0x1013:  push B
0x1015:  A = 0x4
0x1018:  B = 0x9
0x101b:  call 0x10b7
0x101d:  B = pop
0x101f:  A = pop
0x1021:  return

0x1022:  push A
0x1024:  push B
0x1026:  A = 0x1
0x1029:  B = 0xa
0x102c:  call 0x107a
0x102e:  B = pop
0x1030:  A = pop
0x1032:  return

0x1033:  push A
0x1035:  push B
0x1037:  A = 0x12
0x103a:  B = 0xb
0x103d:  call 0x10b7
0x103f:  B = pop
0x1041:  A = pop
0x1043:  return

0x1044:  call 0x1203
0x1046:  return

0x1047:  push A
0x1049:  push B
0x104b:  A = 0x1
0x104e:  B = 0xc
0x1051:  call 0x107a
0x1053:  B = pop
0x1055:  A = pop
0x1057:  return

0x1058:  push A
0x105a:  push B
0x105c:  A = 0x9
0x105f:  B = 0xd
0x1062:  call 0x10b7
0x1064:  B = pop
0x1066:  A = pop
0x1068:  return

0x1069:  push A
0x106b:  push B
0x106d:  A = 0x2
0x1070:  B = 0xe
0x1073:  call 0x107a
0x1075:  B = pop
0x1077:  A = pop
0x1079:  return

0x107a:  push A
0x107c:  push B
0x107e:  push C
0x1080:  C = 0xa9c + 0x2
0x1084:  C = [ C ]
0x1087:  if (C != 0) jmp 0x10b0
0x108a:  call 0x1135
0x108c:  [ 0x0f6f ] = A
0x108f:  B = A + 0xf69
0x1093:  B = [ B ]
0x1096:  A = 0x65a8
0x1099:  call 0x05ee
0x109b:  A = B
0x109e:  call 0x05ee
0x10a0:  A = 0x65e8
0x10a3:  call 0x05ee
0x10a5:  A = B
0x10a8:  call 0x05ee
0x10aa:  print '.\n\n'
0x10b0:  C = pop
0x10b2:  B = pop
0x10b4:  A = pop
0x10b6:  return

0x10b7:  push A
0x10b9:  push B
0x10bb:  push C
0x10bd:  C = 0xa9c + 0x2
0x10c1:  C = [ C ]
0x10c4:  if (C != 0) jmp 0x112e
0x10c7:  call 0x1135
0x10c9:  push A
0x10cb:  A = [ 0x0f6f ]
0x10ce:  B = A + 0xf69
0x10d2:  B = [ B ]
0x10d5:  A = 0x660a
0x10d8:  call 0x05ee
0x10da:  A = B
0x10dd:  call 0x05ee
0x10df:  A = 0x663a
0x10e2:  call 0x05ee
0x10e4:  A = pop
0x10e6:  B = A
0x10e9:  A = [ 0x0f70 ]
0x10ec:  C = [ 0x0f6f ]
0x10ef:  C = C + 0xf6c
0x10f3:  C = [ C ]
0x10f6:  call C
0x10f8:  if (B != 0) jmp 0x1127
0x10fb:  B = [ 0x0f70 ]
0x10fe:  [ 0x0f70 ] = A
0x1101:  C = (A > B) ? 1 : 0
0x1105:  if (C == 0) jmp 0x1111
0x1108:  push A
0x110a:  A = 0x667b
0x110d:  call 0x05ee
0x110f:  A = pop
0x1111:  C = (B > A) ? 1 : 0
0x1115:  if (C == 0) jmp 0x1121
0x1118:  push A
0x111a:  A = 0x669b
0x111d:  call 0x05ee
0x111f:  A = pop
0x1121:  print '\n\n'
0x1125:  jmp 0x112e
0x1127:  call 0x1234
0x1129:  A = 0x66bb
0x112c:  call 0x05ee
0x112e:  C = pop
0x1130:  B = pop
0x1132:  A = pop
0x1134:  return

0x1135:  push A
0x1137:  push B
0x1139:  push C
0x113b:  push D
0x113d:  push E
0x113f:  push F
0x1141:  F = [ 0x0f71 ]
0x1144:  D = (F > 0x752f) ? 1 : 0
0x1148:  if (D != 0) jmp 0x1152
0x114b:  F = F + 0x1
0x114f:  [ 0x0f71 ] = F
0x1152:  D = A
0x1155:  E = B
0x1158:  A = F + 0x2
0x115c:  call 0x08e9
0x115e:  B = [ 0x0f72 ]
0x1161:  A = B | A
0x1165:  B = E
0x1168:  call 0x08c8
0x116a:  [ 0x0f72 ] = A
0x116d:  A = 0xf73
0x1170:  B = F + 0x2
0x1174:  C = E
0x1177:  call 0x11a3
0x1179:  A = 0xf74
0x117c:  B = F * F
0x1180:  C = E * E
0x1184:  call 0x11a3
0x1186:  A = 0xf75
0x1189:  B = 0xd
0x118c:  C = D * 0x9
0x1190:  C = C * C
0x1194:  call 0x11a3
0x1196:  F = pop
0x1198:  E = pop
0x119a:  D = pop
0x119c:  C = pop
0x119e:  B = pop
0x11a0:  A = pop
0x11a2:  return

0x11a3:  push A
0x11a5:  A = [ A ]
0x11a8:  call 0x08c8
0x11aa:  B = C
0x11ad:  call 0x084d
0x11af:  B = pop
0x11b1:  [ B ] = A
0x11b4:  return

0x11b5:  push A
0x11b7:  A = 0xa9c + 0x2
0x11bb:  A = [ A ]
0x11be:  if (A != 0) jmp 0x1200
0x11c1:  A = 0x66d1
0x11c4:  call 0x05ee
0x11c6:  A = [ 0x0f70 ]
0x11c9:  A = (A == 0x1e) ? 1 : 0
0x11cd:  if (A != 0) jmp 0x11de
0x11d0:  A = 0x66f2
0x11d3:  call 0x05ee
0x11d5:  A = 0x671e
0x11d8:  call 0x05ee
0x11da:  call 0x1234
0x11dc:  jmp 0x1200
0x11de:  A = 0x6748
0x11e1:  call 0x05ee
0x11e3:  A = [ 0x0f72 ]
0x11e6:  A = A + 0x1
0x11ea:  if (A != 0) jmp 0x11f4
0x11ed:  A = 0x6774
0x11f0:  call 0x05ee
0x11f2:  jmp 0x11d5
0x11f4:  A = 0x67d8
0x11f7:  call 0x05ee
0x11f9:  A = 0xa9c + 0x2
0x11fd:  [ A ] = 0x7fff
0x1200:  A = pop
0x1202:  return

0x1203:  push A
0x1205:  A = 0xa9c + 0x2
0x1209:  A = [ A ]
0x120c:  if (A != 0) jmp 0x1231
0x120f:  A = 0x685d
0x1212:  call 0x05ee
0x1214:  A = [ 0x0aac ]
0x1217:  A = (A == 0xa3f) ? 1 : 0
0x121b:  if (A != 0) jmp 0x1225
0x121e:  A = 0x6865
0x1221:  call 0x05ee
0x1223:  jmp 0x122a
0x1225:  A = 0x686b
0x1228:  call 0x05ee
0x122a:  A = 0x6871
0x122d:  call 0x05ee
0x122f:  call 0x1234
0x1231:  A = pop
0x1233:  return

0x1234:  push A
0x1236:  [ 0x0f70 ] = 0x16
0x1239:  [ 0x0f71 ] = 0x0
0x123c:  [ 0x0f72 ] = 0x0
0x123f:  [ 0x0f73 ] = 0x0
0x1242:  [ 0x0f74 ] = 0x0
0x1245:  [ 0x0f75 ] = 0x0
0x1248:  A = 0xa9c + 0x2
0x124c:  [ A ] = 0xa3f
0x124f:  A = pop
0x1251:  return

0x1252:  push A
0x1254:  A = 0xa9c + 0x2
0x1258:  A = [ A ]
0x125b:  A = (A == 0x7fff) ? 1 : 0
0x125f:  if (A != 0) jmp 0x126d
0x1262:  A = 0x68c8
0x1265:  call 0x05ee
0x1267:  [ 0x0aac ] = 0xa12
0x126a:  [ 0x0aad ] = 0xa12
0x126d:  A = pop
0x126f:  return

0x1270:  push A
0x1272:  push B
0x1274:  push C
0x1276:  push D
0x1278:  push A
0x127a:  push B
0x127c:  push C
0x127e:  A = 0x6ed1
0x1281:  B = 0x5fb
0x1284:  C = 0x1587 + 0x26b
0x1288:  call 0x05b2
0x128a:  C = pop
0x128c:  B = pop
0x128e:  A = pop
0x1290:  A = 0x1092
0x1293:  B = 0x650a
0x1296:  C = 0x7fff
0x1299:  D = 0x6eed
0x129c:  call 0x0731
0x129e:  push A
0x12a0:  push B
0x12a2:  push C
0x12a4:  A = 0x6ef1
0x12a7:  B = 0x5fb
0x12aa:  C = 0x263 + 0x110
0x12ae:  call 0x05b2
0x12b0:  C = pop
0x12b2:  B = pop
0x12b4:  A = pop
0x12b6:  D = pop
0x12b8:  C = pop
0x12ba:  B = pop
0x12bc:  A = pop
0x12be:  return

0x12bf:  push A
0x12c1:  A = 0xa70 + 0x2
0x12c5:  A = [ A ]
0x12c8:  if (A != 0) jmp 0x12fa
0x12cb:  A = 0xa7c + 0x2
0x12cf:  [ A ] = 0x7fff
0x12d2:  A = 0xa70 + 0x2
0x12d6:  [ A ] = 0x7fff
0x12d9:  A = 0xa74 + 0x2
0x12dd:  [ A ] = 0x0
0x12e0:  push A
0x12e2:  push B
0x12e4:  push C
0x12e6:  A = 0x6f25
0x12e9:  B = 0x5fb
0x12ec:  C = 0x10c7 + 0x120
0x12f0:  call 0x05b2
0x12f2:  C = pop
0x12f4:  B = pop
0x12f6:  A = pop
0x12f8:  jmp 0x1312
0x12fa:  push A
0x12fc:  push B
0x12fe:  push C
0x1300:  A = 0x6f5e
0x1303:  B = 0x5fb
0x1306:  C = 0x827 + 0x17d0
0x130a:  call 0x05b2
0x130c:  C = pop
0x130e:  B = pop
0x1310:  A = pop
0x1312:  A = pop
0x1314:  return

0x1315:  push A
0x1317:  A = 0xa74 + 0x2
0x131b:  [ A ] = 0x7fff
0x131e:  A = 0xa78 + 0x2
0x1322:  [ A ] = 0x0
0x1325:  push A
0x1327:  push B
0x1329:  push C
0x132b:  A = 0x6f99
0x132e:  B = 0x5fb
0x1331:  C = 0x519f + 0x54a
0x1335:  call 0x05b2
0x1337:  C = pop
0x1339:  B = pop
0x133b:  A = pop
0x133d:  [ 0x0aad ] = 0x0
0x1340:  A = pop
0x1342:  return

0x1343:  push A
0x1345:  A = 0xa74 + 0x2
0x1349:  [ A ] = 0x0
0x134c:  A = 0xa78 + 0x2
0x1350:  [ A ] = 0x7fff
0x1353:  push A
0x1355:  push B
0x1357:  push C
0x1359:  A = 0x6fb3
0x135c:  B = 0x5fb
0x135f:  C = 0x1949 + 0x61a7
0x1363:  call 0x05b2
0x1365:  C = pop
0x1367:  B = pop
0x1369:  A = pop
0x136b:  [ 0x0aad ] = 0x0
0x136e:  A = pop
0x1370:  return

0x1371:  push C
0x1373:  push D
0x1375:  C = [ 0x0aac ]
0x1378:  C = (C == 0x999) ? 1 : 0
0x137c:  if (C != 0) jmp 0x1399
0x137f:  push A
0x1381:  push B
0x1383:  push C
0x1385:  A = 0x6fcd
0x1388:  B = 0x5fb
0x138b:  C = 0xaf2 + 0x50ff
0x138f:  call 0x05b2
0x1391:  C = pop
0x1393:  B = pop
0x1395:  A = pop
0x1397:  jmp 0x14d8
0x1399:  C = A + 0x2
0x139d:  [ C ] = 0x7fff
0x13a0:  C = [ 0x099e ]
0x13a3:  C = C + 0x69d7
0x13a7:  C = C + 0x1
0x13ab:  C = [ C ]
0x13ae:  D = 0x999 + 0x1
0x13b2:  D = [ D ]
0x13b5:  D = D + C
0x13b9:  C = B + 0x30
0x13bd:  [ D ] = C
0x13c0:  C = [ 0x099e ]
0x13c3:  C = C + 0x69dd
0x13c7:  C = C + 0x1
0x13cb:  [ C ] = B
0x13ce:  push A
0x13d0:  push A
0x13d2:  push B
0x13d4:  push C
0x13d6:  A = 0x6ff8
0x13d9:  B = 0x5fb
0x13dc:  C = 0xc4d + 0x31d
0x13e0:  call 0x05b2
0x13e2:  C = pop
0x13e4:  B = pop
0x13e6:  A = pop
0x13e8:  A = pop
0x13ea:  push A
0x13ec:  C = A + 0x0
0x13f0:  A = [ C ]
0x13f3:  call 0x05ee
0x13f5:  A = pop
0x13f7:  push A
0x13f9:  push A
0x13fb:  push B
0x13fd:  push C
0x13ff:  A = 0x7007
0x1402:  B = 0x5fb
0x1405:  C = 0x3ca9 + 0x2e39
0x1409:  call 0x05b2
0x140b:  C = pop
0x140d:  B = pop
0x140f:  A = pop
0x1411:  A = pop
0x1413:  C = [ 0x099e ]
0x1416:  C = C + 0x1
0x141a:  [ 0x099e ] = C
0x141d:  D = [ 0x69dd ]
0x1420:  D = (C == D) ? 1 : 0
0x1424:  if (D == 0) jmp 0x14d8
0x1427:  A = 0x0
0x142a:  B = 0x69dd + 0x1
0x142e:  B = [ B ]
0x1431:  A = A + B
0x1435:  B = 0x69dd + 0x2
0x1439:  B = [ B ]
0x143c:  C = 0x69dd + 0x3
0x1440:  C = [ C ]
0x1443:  C = C * C
0x1447:  B = B * C
0x144b:  A = A + B
0x144f:  B = 0x69dd + 0x4
0x1453:  B = [ B ]
0x1456:  C = B * B
0x145a:  C = C * B
0x145e:  A = A + C
0x1462:  B = 0x69dd + 0x5
0x1466:  B = [ B ]
0x1469:  B = B * 0x7fff
0x146d:  A = A + B
0x1471:  B = (A == 0x18f) ? 1 : 0
0x1475:  if (B != 0) jmp 0x14c0
0x1478:  C = 0xa80 + 0x2
0x147c:  [ C ] = 0x999
0x147f:  C = 0xa84 + 0x2
0x1483:  [ C ] = 0x999
0x1486:  C = 0xa88 + 0x2
0x148a:  [ C ] = 0x999
0x148d:  C = 0xa8c + 0x2
0x1491:  [ C ] = 0x999
0x1494:  C = 0xa90 + 0x2
0x1498:  [ C ] = 0x999
0x149b:  [ 0x099e ] = 0x0
0x149e:  A = 0x69d7
0x14a1:  B = 0x14dd
0x14a4:  call 0x05b2
0x14a6:  push A
0x14a8:  push B
0x14aa:  push C
0x14ac:  A = 0x7026
0x14af:  B = 0x5fb
0x14b2:  C = 0x246 + 0x632
0x14b6:  call 0x05b2
0x14b8:  C = pop
0x14ba:  B = pop
0x14bc:  A = pop
0x14be:  jmp 0x14d8
0x14c0:  push A
0x14c2:  push B
0x14c4:  push C
0x14c6:  A = 0x7069
0x14c9:  B = 0x5fb
0x14cc:  C = 0x55e7 + 0x1390
0x14d0:  call 0x05b2
0x14d2:  C = pop
0x14d4:  B = pop
0x14d6:  A = pop
0x14d8:  D = pop
0x14da:  C = pop
0x14dc:  return

0x14dd:  push C
0x14df:  C = 0x999 + 0x1
0x14e3:  C = [ C ]
0x14e6:  C = C + A
0x14ea:  [ C ] = 0x5f
0x14ed:  C = pop
0x14ef:  return

0x14f0:  push A
0x14f2:  push B
0x14f4:  A = 0xa80
0x14f7:  B = 0x2
0x14fa:  call 0x1371
0x14fc:  B = pop
0x14fe:  A = pop
0x1500:  return

0x1501:  push A
0x1503:  push B
0x1505:  A = 0xa84
0x1508:  B = 0x3
0x150b:  call 0x1371
0x150d:  B = pop
0x150f:  A = pop
0x1511:  return

0x1512:  push A
0x1514:  push B
0x1516:  A = 0xa88
0x1519:  B = 0x5
0x151c:  call 0x1371
0x151e:  B = pop
0x1520:  A = pop
0x1522:  return

0x1523:  push A
0x1525:  push B
0x1527:  A = 0xa8c
0x152a:  B = 0x7
0x152d:  call 0x1371
0x152f:  B = pop
0x1531:  A = pop
0x1533:  return

0x1534:  push A
0x1536:  push B
0x1538:  A = 0xa90
0x153b:  B = 0x9
0x153e:  call 0x1371
0x1540:  B = pop
0x1542:  A = pop
0x1544:  return

// Tele Transportation Code

0x1545:  push A
0x1547:  push B
0x1549:  push C
0x154b:  if (H == 0) jmp 0x15e5

0x154e:  push A
0x1550:  push B
0x1552:  push C
0x1554:  A = 0x70ac
0x1557:  B = 0x5fb
0x155a:  C = 0x24e + 0x2a
0x155e:  call 0x05b2
0x1560:  C = pop
0x1562:  B = pop
0x1564:  A = pop
0x156b:  A = 0x4
0x156e:  B = 0x1

0x1571:  call 0x178b <--- YOYO --- A=4, B=1, C=3, D=10, E=101, F=0, G=0, H=? 

0x1573:  B = (A == 0x6) ? 1 : 0
0x1577:  if (B == 0) jmp 0x15cb
0x157a:  push A
0x157c:  push B
0x157e:  push C
0x1580:  A = 0x7156
0x1583:  B = 0x5fb
0x1586:  C = 0x627 + 0x348
0x158a:  call 0x05b2
0x158c:  C = pop
0x158e:  B = pop
0x1590:  A = pop
0x1592:  A = H
0x1595:  B = 0x650a
0x1598:  C = 0x7fff
0x159b:  push D
0x159d:  D = 0x7239
0x15a0:  call 0x0731
0x15a2:  D = pop
0x15a4:  push A
0x15a6:  push B
0x15a8:  push C
0x15aa:  A = 0x723d
0x15ad:  B = 0x5fb
0x15b0:  C = 0xd7a + 0x41f7
0x15b4:  call 0x05b2
0x15b6:  C = pop
0x15b8:  B = pop
0x15ba:  A = pop
0x15bc:  [ 0x0aac ] = 0x9c2
0x15bf:  [ 0x0aad ] = 0x0
0x15c2:  B = 0xa94 + 0x2
0x15c6:  [ B ] = 0x7fff
0x15c9:  jmp 0x1652
0x15cb:  push A
0x15cd:  push B
0x15cf:  push C
0x15d1:  A = 0x72d8
0x15d4:  B = 0x5fb
0x15d7:  C = 0x1ee5 + 0x78e
0x15db:  call 0x05b2
0x15dd:  C = pop
0x15df:  B = pop
0x15e1:  A = pop
0x15e3:  jmp 0x1652

// Default Teleportation

0x15e5:  push A
0x15e7:  push B
0x15e9:  push C
0x15eb:  A = 0x7369
0x15ee:  B = 0x5fb
0x15f1:  C = 0x20cb + 0x3a7
0x15f5:  call 0x05b2
0x15f7:  C = pop
0x15f9:  B = pop
0x15fb:  A = pop
0x15fd:  A = 0x0
0x1600:  C = 0x1 + 0x69dd
0x1604:  B = [ C ]
0x1607:  A = A + B
0x160b:  A = A * 0x7bac
0x160f:  call 0x084d
0x1611:  B = [ 0x69dd ]
0x1614:  B = B + 0x69dd
0x1618:  C = C + 0x1
0x161c:  B = (C > B) ? 1 : 0
0x1620:  if (B == 0) jmp 0x1604
0x1623:  B = 0x650a
0x1626:  C = 0x7fff
0x1629:  push D
0x162b:  D = 0x73df
0x162e:  call 0x0731
0x1630:  D = pop
0x1632:  push A
0x1634:  push B
0x1636:  push C
0x1638:  A = 0x73e3
0x163b:  B = 0x5fb
0x163e:  C = 0x14d7 + 0x4516
0x1642:  call 0x05b2
0x1644:  C = pop
0x1646:  B = pop
0x1648:  A = pop
0x164a:  [ 0x0aac ] = 0x9b8
0x164d:  [ 0x0aad ] = 0x0
0x1650:  jmp 0x1652
0x1652:  C = pop
0x1654:  B = pop
0x1656:  A = pop
0x1658:  return

0x1659:  push A
0x165b:  push B
0x165d:  push C
0x165f:  push D
0x1661:  push A
0x1663:  push B
0x1665:  push C
0x1667:  A = 0x743d
0x166a:  B = 0x5fb
0x166d:  C = 0x10b7 + 0x28b8
0x1671:  call 0x05b2
0x1673:  C = pop
0x1675:  B = pop
0x1677:  A = pop
0x1679:  A = [ 0x0f73 ]
0x167c:  B = [ 0x0f74 ]
0x167f:  call 0x084d
0x1681:  B = [ 0x0f75 ]
0x1684:  call 0x084d
0x1686:  B = 0x653f
0x1689:  C = 0x4
0x168c:  push D
0x168e:  D = 0x74f6
0x1691:  call 0x0731
0x1693:  D = pop
0x1695:  push A
0x1697:  push B
0x1699:  push C
0x169b:  A = 0x74fa
0x169e:  B = 0x5fb
0x16a1:  C = 0xd57 + 0x1394
0x16a5:  call 0x05b2
0x16a7:  C = pop
0x16a9:  B = pop
0x16ab:  A = pop
0x16ad:  D = pop
0x16af:  C = pop
0x16b1:  B = pop
0x16b3:  A = pop
0x16b5:  return

0x16b6:  print '- '
0x16ba:  call 0x05ee
0x16bc:  print '\n'
0x16be:  return

0x16bf:  push B
0x16c1:  push C
0x16c3:  A = 0x6af5
0x16c6:  B = 0x16d6
0x16c9:  C = 0x0
0x16cc:  call 0x05b2
0x16ce:  A = C
0x16d1:  C = pop
0x16d3:  B = pop
0x16d5:  return

0x16d6:  push D
0x16d8:  push E
0x16da:  D = [ 0x0aac ]
0x16dd:  E = A + 0x2
0x16e1:  E = [ E ]
0x16e4:  D = (D == E) ? 1 : 0
0x16e8:  if (D == 0) jmp 0x16ef
0x16eb:  C = C + 0x1
0x16ef:  E = pop
0x16f1:  D = pop
0x16f3:  return

0x16f4:  push A
0x16f6:  push B
0x16f8:  A = 0x6af5
0x16fb:  B = 0x1705
0x16fe:  call 0x05b2
0x1700:  B = pop
0x1702:  A = pop
0x1704:  return

0x1705:  push D
0x1707:  D = A + 0x2
0x170b:  D = [ D ]
0x170e:  D = (C == D) ? 1 : 0
0x1712:  if (D == 0) jmp 0x171e
0x1715:  A = A + 0x0
0x1719:  A = [ A ]
0x171c:  call 0x16b6
0x171e:  D = pop
0x1720:  return

0x1721:  push B
0x1723:  push C
0x1725:  C = A
0x1728:  A = 0x6af5
0x172b:  B = 0x174c
0x172e:  call 0x0607
0x1730:  B = (A == 0x7fff) ? 1 : 0
0x1734:  if (B != 0) jmp 0x1744
0x1737:  B = 0x6af5 + A
0x173b:  B = B + 0x1
0x173f:  A = [ B ]
0x1742:  jmp 0x1747
0x1744:  A = 0x0
0x1747:  C = pop
0x1749:  B = pop
0x174b:  return

0x174c:  push B
0x174e:  B = C
0x1751:  A = A + 0x0
0x1755:  A = [ A ]
0x1758:  call 0x0683
0x175a:  B = pop
0x175c:  if (A == 0) jmp 0x1765
0x175f:  C = B
0x1762:  B = 0x7fff
0x1765:  return

0x1766:  push B
0x1768:  push C
0x176a:  A = A + 0x2
0x176e:  A = [ A ]
0x1771:  if (A == 0) jmp 0x1783
0x1774:  B = [ 0x0aac ]
0x1777:  B = (A == B) ? 1 : 0
0x177b:  if (B != 0) jmp 0x1783
0x177e:  A = 0x0
0x1781:  jmp 0x1786
0x1783:  A = 0x1
0x1786:  C = pop
0x1788:  B = pop
0x178a:  return

0x178b:  if (A != 0) jmp 0x1793
0x178e:  A = B + 0x1
0x1792:  return

0x1793:  if (B != 0) jmp 0x17a0
0x1796:  A = A + 0x7fff
0x179a:  B = H

0x179d:  call 0x178b
0x179f:  return

0x17a0:  push A
0x17a2:  B = B + 0x7fff
0x17a6:  call 0x178b
0x17a8:  B = A
0x17ab:  A = pop
0x17ad:  A = A + 0x7fff
0x17b1:  call 0x178b
0x17b3:  return


--- 0x1571:  call 0x178b <--- YOYO --- A=4, B=1, C=3, D=10, E=101, F=0, G=0, H=? ---

function validate(A, B, H) // 4, 1, ?
{
    if (A === 0) 
        return B+1;

    if (B == 0)
    {
        A = (A + 0x7FFF) & 0x7FFF;
        B = H;

        return validate(A, B, H);
    }
    else
    {
        B = (B + 0x7FFF) & 0x7FFF; // ==> -1
        B = validate(A, B, H);
        A = (A + 0x7FFF) & 0x7FFF;
        return validate(A, B, H);
    }
}
